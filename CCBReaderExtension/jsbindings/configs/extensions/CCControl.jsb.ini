[CCControl]

# You can extend the functionality by using plugins
# Basically you can override the functionality of the converters
#plugin = constant_class = JSBGenerateConstants_Ignore,

# JS namespace. By default it is the same as config file namespace.
# This namespace is used then the script autogenerates JS code. eg: with the constants
## Not used in CCB Reader
js_namespace = cc

# prefix that will be removed from the ObjC classes in order to generate the JS classes
# eg: If the class name is CCNode, then on JavaScript it will be Node
obj_class_prefix_to_remove = CC

# Classes to generate. Use '*' to generate all the parsed classes.
# Subclasses will be parsed as well.
# eg: If CCSprite is parsed, then CCNode and NSObject will be parsed as well
# It supports regular expressions to match class names.
# eg: all cocos2d actions ending in 'By': CC(.*)By
classes_to_parse = CCScale9Sprite,CCControl,CCControlButton

# Classes to ignore.
# It is a good idea to add classes that you don't want to have a proxy object. Usually internal classes,
# or classes that are already native on JavaScript should be added here.
# It supports regular expressions to match class names.
# eg: all NS classes: NS(.*)
classes_to_ignore = CCLayer(.*),NS(.*)

# Class properties
# Options
#  manual               Means that the class is manually bound. No binding info will generated, but it can be used.
class_properties = CCLayer = manual,
                   CCNode = manual,
                   CCSpriteFrame = manual,
                   NSObject = manual,
                   UITouch = manual,
                   NSEvent = manual,
                   CCControlButton = reserved_slots:3,

# Whether or not to generate constructors from base classes for the current class.
# In JavaScript, the "constructors" or "static methods" are not "inherited".
# It is recommended to set it to "auto".
# Options:
#    False: Don't inherited
#    True: Inherit all class methods from all ancestors
#    Auto: Inherit only if it has no class constructors. Stop when the fist class constructor is added.
inherit_class_methods = Auto

# Files that are going to be imported by the autogenerated files.
# Useful to declare subclasses of an already bound project
# eg: manual bindings for NSObject
import_files = CCControlExtension.h, js_bindings_cocos2d_ios_classes.h, js_bindings_NS_manual.h, js_bindings_cocos2d_manual.h

# The prefix will be removed from function name.
# eg: if the C function is "cpBodyAddShape", then the JS name will be "bodyWithAddShape"
## For cocos2d add "cc"
function_prefix_to_remove =

# Free functions to be parsed
functions_to_parse =
# Free functions not to parse
functions_to_ignore =

# Rules used for methods:
# options:
#   name:"js_name"         Rename methods.
#   ignore                 This method will be ignored.
#   callback               This method is a callback. It will be invoked from Objective-C
#   no_swizzle             It means that the callback function is an optional protocol and should not be "swizzled" because there is no implementation for it.
#   variadic_2_array       It means that all arguments are variadic, and an Array will be created with them
#   merge:name | name...   List of methods names that should be merged with this method as well.
#   manual                 It means that its implementation won't be autogenerated. It is implemented manually
#
#  Regular expressions are supported in the Class names, but not in the Method names
#
method_properties = CCScale9Sprite # spriteWithSpriteFrame:capInsets: = name: "createWithSpriteFrame"; merge: "spriteWithSpriteFrame:",
				CCScale9Sprite # spriteWithSpriteFrameName:capInsets: = name: "createWithSpriteFrameName"; merge: "spriteWithSpriteFrameName:",
				CCScale9Sprite # spriteWithFile:rect:capInsets: = name: "create"; merge: "spriteWithFile:rect:" | "spriteWithFile:",
				CCScale9Sprite # spriteWithFile:capInsets: = name: "_create",
				CCScale9Sprite # initWithFile:rect:capInsets: = name: "initWithFile"; merge: "initWithFile:rect:" | "initWithFile:",
				CCScale9Sprite # initWithFile:capInsets: = name: "_initWithFile",
				CCScale9Sprite # initWithSpriteFrame:capInsets: = name: "initWithSpriteFrame"; merge: "initWithSpriteFrame:",
				CCScale9Sprite # initWithSpriteFrameName:capInsets: = name: "initWithSpriteFrameName"; merge: "initWithSpriteFrameName:",
				CCScale9Sprite # resizableSpriteWithCapInsets: = name: "getResizableSprite",
				CCControl # sendActionsForControlEvents: = ignore,
				CCControl # addTarget:action:forControlEvents: = ignore,
				CCControl # removeTarget:action:forControlEvents: = ignore,
                CCControl # eventLocation: = ignore,
                CCControl # isMouseInside: = ignore,
				CCControl # setBlock:forControlEvents: = name: "setCallback"; manual, 
				CCControl # openURL: = name: "openURL"; manual,
				CCControlButton # buttonWithLabel:backgroundSprite: = name: "createWithLabel",
				CCControlButton # buttonWithTitle:fontName:fontSize: = name: "createWithTitle",
				CCControlButton # buttonWithBackgroundSprite: = name: "createWithSprite",
				CCControlButton # titleForState: = name: "getTitleForState",
				CCControlButton # setTitle:forState: = name: "setTitleForState",
				CCControlButton # titleColorForState: = name: "getTitleColorForState",
				CCControlButton # setTitleColor:forState: = name: "setTitleColorForState",
				CCControlButton # titleLabelForState: = name: "getTitleLabelForState",
				CCControlButton # setTitleLabel:forState: = name: "setTitleLabelForState",
				CCControlButton # setTitleBMFont:forState: = name: "setTitleBMFontForState",
				CCControlButton # setTitleTTF:forState: = name: "setTitleTTFForState",
				CCControlButton # titleTTFForState: = name: "getTitleTTFForState",
				CCControlButton # setTitleTTFSize:forState: = name: "setTitleTTFSizeForState",
				CCControlButton # titleTTFSizeForState: = name: "getTitleTTFSizeForState",
				CCControlButton # backgroundSpriteForState: = name: "getBackgroundSpriteForState",
				CCControlButton # setBackgroundSprite:forState: = name: "setBackgroundSpriteForState",
				CCControlButton # setBackgroundSpriteFrame:forState: = name: "setBackgroundSpriteFrameForState",

#
# Struct properties
# options:
#   opaque              The structure will be treated as 'opaque' and can't not be inspected from JS.
#                       Opaque structures are much faster to generate than 'manual' or 'automatic' structures
#   manual              Manual conversion is provided for this structures. jsval_to_structname() and structname_to_jsval shall exists in your project
struct_properties = CGPoint = manual,
                    CGSize = manual,
                    CGRect = manual,
                    ccColor3B = manual,
                    ccColor4B = manual,
                    ccColor4F = manual,
                    ccGridSize = manual,

# BridgeSupport files
# add as many as you need. Usually you will only one.
bridge_support_file = CCControl.bridgesupport, CCControl-Utils.bridgesupport

# File that contains information that complements BridgeSupport (not present on BridgeSupport file)
complement_file = CCControl-complement.txt


